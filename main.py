#! encoding: utf-8
import telebot
import os
import time
from datetime import datetime
from db_layer import db_acces
from db_layer import states
from telebot import types, apihelper
from flask import Flask, request
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.interval import IntervalTrigger
import configparser
import atexit

# –µ—Å–ª–∏ –≤ –æ–∫—É—Ä–∂–µ–Ω–∏–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è HEROKU, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
if 'HEROKU' in list(os.environ.keys()):
    TOKEN = str(os.environ.get('TOKEN'))
# –∏–Ω–∞—á–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ –∏–∑ —Å–∫—Ä—ã—Ç–æ–≥–æ –≤ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
else:
    import token_key
    TOKEN = token_key.token

bot = telebot.TeleBot(TOKEN)
server = Flask(__name__)
config = configparser.ConfigParser()
config.read('conf.ini')
ADMIN_ID = 446116692
MY_ID = 410634632
bot_access_text = '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞, –≤–∞–º –Ω—É–∂–Ω–æ: \n\n1. –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ' \
                  '–≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞\n*–∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ - –±–æ—Ç—É —Ö–≤–∞—Ç–∏—Ç –æ–¥–Ω–æ–≥–æ –ª—é–±–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, ' \
                  '–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n2. –ü–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ—Å—Ç –∏–∑ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —á–∞—Ç –±–æ—Ç–∞\n\n3. ' \
                  '–ü—Ä–æ—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–º —É–∫–∞–∑–∞–Ω–∏—è–º –±–æ—Ç–∞¬†\n' \
                  '[–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–º–æ—â–∏](http://telegra.ph/Kak-sdelat-bota-administratorom-02-08)'


def save_data():
    with open('conf.ini', 'w') as conf:
            config.write(conf)


def update_users():
    if datetime.now().hour == 0:
        config.set('stat', 'new_users', '0')
        save_data()


scheduler = BackgroundScheduler()
scheduler.start()
scheduler.add_job(
    func=update_users,
    trigger=IntervalTrigger(hours=1),
    id='my_job',
    name='Clean list of new users',
    replace_existing=True
)
atexit.register(lambda: scheduler.shutdown())


def get_main_menu_markup():
    markup = types.ReplyKeyboardMarkup()
    markup.row('üëÅ –°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç', '‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª')
    markup.row('üöÄ –î–ª—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π')
    markup.row('üì± –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üí∞ –ë–∞–ª–∞–Ω—Å')
    markup.row('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–∞')
    markup.resize_keyboard = True
    return markup


def get_cancel_markup():
    markup = types.ReplyKeyboardMarkup()
    markup.row('–û—Ç–º–µ–Ω–∞')
    markup.resize_keyboard = True
    return markup


@bot.message_handler(commands=['start'])
@bot.message_handler(func=lambda mes: mes.text == '‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
def greeting(mes):
    markup = get_main_menu_markup()
    user = db_acces.get_user(mes.from_user.id)
    if user is None:
        db_acces.create_user(mes.from_user.first_name, mes.from_user.id)
        user = db_acces.get_user(mes.from_user.id)
        current_users = int(config['stat']['new_users']) + 1
        config.set('stat', 'new_users', str(current_users))
        save_data()
    bot.send_message(mes.from_user.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}!'.format(name=user.name),
                     reply_markup=markup)


@bot.message_handler(content_types=['text'], func=lambda mes: db_acces.get_user(mes.from_user.id) is None)
def other_message(mes):
    bot.send_message(mes.from_user.id, '–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã',
                     reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(func=lambda mes: mes.text == 'üöÄ –î–ª—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π' and
                     db_acces.get_user(mes.from_user.id) is not None)
def for_customers(mes: types.Message):
    text = '*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n–ß–µ—Ä–µ–∑ –±–æ—Ç–∞ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –í–∞—à –∫–∞–Ω–∞–ª –∏–ª–∏ –∫—É–ø–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ—Å—Ç–∞ –∏–∑ ' \
           '–í–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.\n–û–±–∞ –¥–µ–π—Å—Ç–≤–∏—è *–ø–æ–≤—ã—à–∞—é—Ç* —Ü–µ–Ω—É –∫–∞–Ω–∞–ª–∞ –∏/–∏–ª–∏ —Ä–µ–∫–ª–∞–º—ã.\n–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—É—é ' \
           '—Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é.\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –≤ –º–µ–Ω—é. '
    markup = types.ReplyKeyboardMarkup()
    markup.row('–ü–æ–¥–ø–∏—Å—á–∏–∫–∏', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã')
    markup.row('–ú–æ–∏ –∑–∞–∫–∞–∑—ã')
    markup.row('‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.row_width = True
    markup.resize_keyboard = True
    bot.send_message(mes.from_user.id, text, parse_mode='Markdown', reply_markup=markup)


@bot.message_handler(func=lambda mes: mes.text == '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏' and
                     db_acces.get_user_state(mes.from_user.id) is states.CHOOSE_OPTION)
def order_channel(mes: types.Message):
    db_acces.set_user_state(mes.from_user.id, states.FORWARD_POST_FOR_SUB)
    bot.send_message(mes.from_user.id, bot_access_text, parse_mode='Markdown',
                     reply_markup=get_cancel_markup())


@bot.message_handler(func=lambda mes: mes.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã' and
                     db_acces.get_user_state(mes.from_user.id) is states.CHOOSE_OPTION)
def order_post(mes: types.Message):
    db_acces.set_user_state(mes.from_user.id, states.FORWARD_POST_FOR_WATCH)
    bot.send_message(mes.from_user.id, '–ü–µ—Ä–µ—à–ª–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –ø–æ—Å—Ç', parse_mode='Markdown',
                     reply_markup=get_cancel_markup())


@bot.message_handler(func=lambda mes: db_acces.get_user_state(mes.from_user.id) is states.FORWARD_POST_FOR_WATCH or
                     db_acces.get_user_state(mes.from_user.id) is states.FORWARD_POST_FOR_SUB)
def forward_message(mes: types.Message):
    if not mes.text == '–û—Ç–º–µ–Ω–∞':
        if db_acces.get_user_state(mes.from_user.id) == states.FORWARD_POST_FOR_WATCH and mes.forward_from_chat is not None:
            username = mes.from_user.id
            post_id = mes.message_id
            user = db_acces.get_user_state(mes.from_user.id)
            db_acces.create_order_post(post_id, username, 0.5, 50, user)
            bot.send_message(mes.from_user.id,
                             'üëë –í—Å–µ —Å–¥–µ–ª–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\nüë•–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å 1 –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ–≥–æ '
                             '–ø–æ—Å—Ç–∞ –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 0.04 —Ä—É–±–ª–µ–π)')
            db_acces.set_user_state(mes.from_user.id, states.SET_PRICE_FOR_WATCH)
        elif db_acces.get_user_state(mes.from_user.id) == states.FORWARD_POST_FOR_SUB and \
                mes.forward_from_chat is not None:

            username = mes.forward_from_chat.username
            try:
                bot.get_chat_members_count('@' + username)
            except apihelper.ApiException:
                bot.send_message(mes.from_user.id, '–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞!')
            else:
                user = db_acces.get_user_state(mes.from_user.id)
                db_acces.create_channel(username, 0.5, 50, user)
                bot.send_message(mes.from_user.id,
                                 'üëë –í—Å–µ —Å–¥–µ–ª–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\nüë•–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å 1 –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –Ω–∞ –≤–∞—à '
                                 '–∫–∞–Ω–∞–ª –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 0.5 —Ä—É–±–ª–µ–π')
                db_acces.set_user_state(mes.from_user.id, states.SET_PRICE_FOR_SUB)

        else:
            bot.send_message(mes.from_user.id, '–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=get_cancel_markup())
    else:
        db_acces.set_user_state(mes.from_user.id, states.CHOOSE_OPTION)
        bot.send_message(mes.from_user.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=get_main_menu_markup())


@bot.message_handler(func=lambda mes: db_acces.get_user_state(mes.from_user.id) == states.SET_PRICE_FOR_WATCH)
def set_price_for_watch(mes: types.Message):
    if not mes.text == '–û—Ç–º–µ–Ω–∞':
        try:
            price = float(mes.text)
        except ValueError:
            bot.send_message(mes.from_user.id, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        else:
            if price >= 0.04:
                bot.send_message(mes.from_user.id, '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤',
                                 reply_markup=types.ReplyKeyboardRemove())
                db_acces.set_price_for_new_post(mes.from_user.id, price)
                db_acces.set_user_state(mes.from_user.id, states.SET_COUNT_OF_WATCH)
            else:
                bot.send_message(mes.from_user.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: 0.04—Ä')
    else:
        db_acces.set_user_state(mes.from_user.id, states.CHOOSE_OPTION)
        db_acces.delete_post_order(mes.from_user.id)
        bot.send_message(mes.from_user.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=get_main_menu_markup())


@bot.message_handler(func=lambda mes: db_acces.get_user_state(mes.from_user.id) == states.SET_COUNT_OF_WATCH)
def set_count_of_watch(mes: types.Message):
    try:
        count = int(mes.text)
    except ValueError:
        bot.send_message(mes.from_user.id, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    else:
        if count >= 50:
            price = db_acces.get_price_for_new_post(mes.from_user.id)
            db_acces.set_watchs_for_new_post(mes.from_user.id, count)
            res = count * price
            bot.send_message(mes.from_user.id, '–û—Ç–ª–∏—á–Ω–æ! –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è '
                                               '—Å–æ—Å—Ç–∞–≤–∏—Ç {count} * {price} = {res}—Ä.'
                                               .format(count=count, price=price, res=res))
            markup = types.ReplyKeyboardMarkup()
            markup.row('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ')
            markup.row('–û—Ç–º–µ–Ω–∞')
            markup.resize_keyboard = True
            bot.send_message(mes.from_user.id, '–í—Å—ë –≤–µ—Ä–Ω–æ?', reply_markup=markup)
            db_acces.set_user_state(mes.from_user.id, states.CONFIRM_WATCHS)
        else:
            bot.send_message(mes.from_user.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 50')


@bot.message_handler(func=lambda mes: db_acces.get_user_state(mes.from_user.id) == states.CONFIRM_WATCHS)
def confirm_watches(mes: types.Message):
    if mes.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ':
        price = db_acces.get_price_for_new_post(mes.from_user.id)
        count = db_acces.get_watchs_for_new_post(mes.from_user.id)
        end_price = count * price
        balance = db_acces.get_user_balance(mes.from_user.id)
        if (balance - end_price) >= 0:
            db_acces.set_user_balance(mes.from_user.id, balance - end_price)
            db_acces.publish_post_order(mes.from_user.id)
            bot.send_message(mes.from_user.id, '–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!', reply_markup=get_main_menu_markup())
            db_acces.set_user_state(mes.from_user.id, states.CHOOSE_OPTION)
        else:
            bot.send_message(mes.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ —Å–Ω–æ–≤–∞',
                             reply_markup=get_main_menu_markup())
            db_acces.delete_post_order(mes.from_user.id)
            db_acces.set_user_state(mes.from_user.id, states.CHOOSE_OPTION)
    elif mes.text == '–û—Ç–º–µ–Ω–∞':
        bot.send_message(mes.from_user.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=get_main_menu_markup())
        db_acces.delete_post_order(mes.from_user.id)
        db_acces.set_user_state(mes.from_user.id, states.CHOOSE_OPTION)
    else:
        bot.send_message(mes.from_user.id, '–ö–∞–∫–æ–π-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


# ------ Channels -------


@bot.message_handler(func=lambda mes: db_acces.get_user_state(mes.from_user.id) == states.SET_PRICE_FOR_SUB)
def set_price_for_sub(mes: types.Message):
    if not mes.text == '–û—Ç–º–µ–Ω–∞':
        try:
            price = float(mes.text)
        except ValueError:
            bot.send_message(mes.from_user.id, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        else:
            if price >= 0.5:
                bot.send_message(mes.from_user.id, '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤',
                                 reply_markup=types.ReplyKeyboardRemove())
                db_acces.set_price_for_new_channel(mes.from_user.id, price)
                db_acces.set_user_state(mes.from_user.id, states.SET_COUNT_OF_SUB)
            else:
                bot.send_message(mes.from_user.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: 0.25—Ä')
    else:
        db_acces.set_user_state(mes.from_user.id, states.CHOOSE_OPTION)
        db_acces.delete_channel_order(mes.from_user.id)
        bot.send_message(mes.from_user.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=get_main_menu_markup())


@bot.message_handler(func=lambda mes: db_acces.get_user_state(mes.from_user.id) == states.SET_COUNT_OF_SUB)
def set_count_of_sub(mes: types.Message):
    try:
        count = int(mes.text)
    except ValueError:
        bot.send_message(mes.from_user.id, '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤')
    else:
        if count >= 50:
            price = db_acces.get_price_for_new_channel(mes.from_user.id)
            db_acces.set_sub_for_new_channel(mes.from_user.id, count)
            res = count * price
            bot.send_message(mes.from_user.id, '–û—Ç–ª–∏—á–Ω–æ! –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è '
                                               '—Å–æ—Å—Ç–∞–≤–∏—Ç {count} * {price} = {res}—Ä.'
                                               .format(count=count, price=price, res=res))
            markup = types.ReplyKeyboardMarkup()
            markup.row('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ')
            markup.row('–û—Ç–º–µ–Ω–∞')
            markup.resize_keyboard = True
            bot.send_message(mes.from_user.id, '–í—Å—ë –≤–µ—Ä–Ω–æ?', reply_markup=markup)
            db_acces.set_user_state(mes.from_user.id, states.CONFIRM_SUB)
        else:
            bot.send_message(mes.from_user.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 50')


@bot.message_handler(func=lambda mes: db_acces.get_user_state(mes.from_user.id) == states.CONFIRM_SUB)
def confirm_sub(mes: types.Message):
    if mes.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ':
        price = db_acces.get_price_for_new_channel(mes.from_user.id)
        count = db_acces.get_sub_for_new_channel(mes.from_user.id)
        end_price = price * count
        balance = db_acces.get_user_balance(mes.from_user.id)
        if (balance - end_price) >= 0:
            db_acces.set_user_balance(mes.from_user.id, balance - end_price)
            db_acces.publish_channel_order(mes.from_user.id)
            bot.send_message(mes.from_user.id, '–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!', reply_markup=get_main_menu_markup())
            db_acces.set_user_state(mes.from_user.id, states.CHOOSE_OPTION)
        else:
            bot.send_message(mes.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ —Å–Ω–æ–≤–∞',
                             reply_markup=get_main_menu_markup())
            db_acces.delete_post_order(mes.from_user.id)
            db_acces.set_user_state(mes.from_user.id, states.CHOOSE_OPTION)
    elif mes.text == '–û—Ç–º–µ–Ω–∞':
        bot.send_message(mes.from_user.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=get_main_menu_markup())
        db_acces.delete_post_order(mes.from_user.id)
        db_acces.set_user_state(mes.from_user.id, states.CHOOSE_OPTION)
    else:
        bot.send_message(mes.from_user.id, '–ö–∞–∫–æ–π-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


@bot.message_handler(func=lambda mes: mes.text == '–ú–æ–∏ –∑–∞–∫–∞–∑—ã')
def my_orders(mes: types.Message):
    text = 'üïµ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã üí∞\n\n'
    posts = db_acces.get_user_order_posts(mes.from_user.id)
    channels = db_acces.get_user_order_channels(mes.from_user.id)
    if channels.count() > 0:
        for c in channels:
            username = c.username
            count = c.how_many_sub
            price = c.price_for_sub
            end_price = c.price_for_order
            text += 'üì£ –ö–∞–Ω–∞–ª @{username}\n' \
                    '—Å—Ç–æ–∏–º–æ—Å—Ç—å: –∑–∞–∫–∞–∑–∞ - –ø–æ–¥–ø–∏—Å–∫–∏: {end_price}—Ä. - {price}—Ä.\n' \
                    '–ø–æ–¥–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {count}\n\n'.format(username=username, end_price=end_price,
                                                            price=price, count=count)
    if posts.count() > 0:
        i = 0
        for p in posts:
            i += 1
            username = p.from_chat_username
            count = p.how_many_watch
            price = p.price_for_watch
            end_price = p.price_for_order
            id_p = p.from_message_id
            text += 'üì£ –ø–æ—Å—Ç –∏–∑ @{username} ‚Ññ{i}\n' \
                    '—Å—Ç–æ–∏–º–æ—Å—Ç—å: –∑–∞–∫–∞–∑–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {end_price}—Ä. - {price}—Ä.\n' \
                    '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {count}\n\n'.format(username=username, i=i, end_price=end_price,
                                                              price=price, count=count, id=id_p)
    else:
        text = ' –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤! ‚úã'
    bot.send_message(mes.from_user.id, text, parse_mode='HTML')


@bot.message_handler(func=lambda mes: mes.text == 'üì± –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' and db_acces.get_user(mes.from_user.id) is not None)
def profile(mes: types.Message):
    user = db_acces.get_user(mes.from_user.id)
    uname = '–ù–µ—Ç'
    if mes.from_user.username is not None:
        uname = mes.from_user.username
    text = '<b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, {name}</b> \n\n' \
           'üîë–ú–æ–π id: {id} \n' \
           'üë§–ú–æ–π username: {uname} \n' \
           '‚ûï–°–¥–µ–ª–∞–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {sub} \n' \
           'üëÄ–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {post}\n' \
           'üç∑–î–æ—Ö–æ–¥ —Å –ø–æ–¥–ø–∏—Å–æ–∫: {isub}—Ä \n' \
           'üç∏–î–æ—Ö–æ–¥ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {iwatch}—Ä \n' \
           'üí∞–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}—Ä \n' \
           'üí≥–í—ã–≤–µ–¥–µ–Ω–æ –≤—Å–µ–≥–æ: {ded}—Ä \n' \
           'üí∞–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ: {earned}—Ä'\
        .format(name=user.name, id=str(user.telegram_id),
                uname='@' + uname, sub=user.made_sub,
                post=user.watched_posts, isub=user.income_sub,
                iwatch=user.income_watched, balance=user.balance,
                ded=user.deduced, earned=user.earned)
    bot.send_message(mes.from_user.id, text, parse_mode='HTML')


@bot.message_handler(func=lambda mes: mes.text == 'üí∞ –ë–∞–ª–∞–Ω—Å' and db_acces.get_user(mes.from_user.id) is not None)
def get_balance(mes: types.Message):
    balance = db_acces.get_user_balance(mes.from_user.id)
    markup = types.ReplyKeyboardMarkup()
    markup.row('üí≥ –í—ã–≤–æ–¥', 'üíµ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')
    markup.row('‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.resize_keyboard = True
    bot.send_message(mes.from_user.id, '–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {b} —Ä—É–±–ª–µ–π'.format(b=str(balance)),
                     reply_markup=markup)


@bot.message_handler(func=lambda mes: mes.text == 'üíµ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' and db_acces.get_user(mes.from_user.id) is not None)
def put_money(mes: types.Message):
    markup = types.ReplyKeyboardMarkup()
    markup.row('Qiwi', 'Yandex.Money', '–î—Ä—É–≥–æ–π')
    markup.row('‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(mes.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', reply_markup=markup)


@bot.message_handler(func=lambda mes: mes.text == 'Qiwi' and db_acces.get_user(mes.from_user.id) is not None)
def put_money_qiwi(mes: types.Message):
    user_id = str(mes.from_user.id)
    text = 'üî•–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É ' \
           '–Ω–∞ QIWI –∫–æ—à–µ–ª–µ–∫ —Å –Ω–æ–º–µ—Ä–æ–º 79184334240 –∏ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º *{id}* –∫ –ø–µ—Ä–µ–≤–æ–¥—É *(–≤–∞–∂–Ω–æ, –∏–Ω–∞—á–µ –ø–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–µ—Ç—Å—è!)*.\n' \
           '‚ö°Ô∏è–°—É–º–º–∞ –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.'.format(id=user_id)
    markup = types.ReplyKeyboardMarkup()
    markup.row('‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(mes.from_user.id, text, reply_markup=markup, parse_mode='Markdown')


@bot.message_handler(func=lambda mes: mes.text == 'Yandex.Money' and db_acces.get_user(mes.from_user.id) is not None)
def put_money_yandex(mes: types.Message):
    user_id = str(mes.from_user.id)
    text = 'üî•–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É ' \
           '–ø–æ [—Å—Å—ã–ª–∫–µ](https://money.yandex.ru/to/410016312082017) –∏ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º *{id}* –∫ –ø–µ—Ä–µ–≤–æ–¥—É *(–≤–∞–∂–Ω–æ, –∏–Ω–∞—á–µ –ø–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–µ—Ç—Å—è!)*.\n' \
           '‚ö°Ô∏è–°—É–º–º–∞ –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.'.format(id=user_id)
    markup = types.ReplyKeyboardMarkup()
    markup.row('‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(mes.from_user.id, text, reply_markup=markup, parse_mode='Markdown')


@bot.message_handler(func=lambda mes: mes.text == '–î—Ä—É–≥–æ–π' and db_acces.get_user(mes.from_user.id) is not None)
def put_money_other(mes: types.Message):
    user_id = str(mes.from_user.id)
    text = 'üî•–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º ' \
           '–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É üë§ @Evgenyadmin —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º *{id}* –∫ –ø–µ—Ä–µ–≤–æ–¥—É *(–≤–∞–∂–Ω–æ, –∏–Ω–∞—á–µ –ø–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–µ—Ç—Å—è!)*.\n' \
           '‚ö°Ô∏è–°—É–º–º–∞ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è.'.format(id=user_id)
    markup = types.ReplyKeyboardMarkup()
    markup.row('‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(mes.from_user.id, text, reply_markup=markup, parse_mode='Markdown')


@bot.message_handler(func=lambda mes: mes.text == 'üí≥ –í—ã–≤–æ–¥' and db_acces.get_user(mes.from_user.id) is not None)
def take_money(mes: types.Message):
    user_id = str(mes.from_user.id)
    text = '–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @Evgenyadmin üë§, —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º *{id}*'.format(id=user_id)
    markup = types.ReplyKeyboardMarkup()
    markup.row('‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(mes.from_user.id, text, reply_markup=markup, parse_mode='Markdown')


@bot.message_handler(func=lambda mes: mes.text == '‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–∞')
def rules(mes: types.Message):
    text = '!!!–ü–†–ê–í–ò–õ–ê –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ \n\nüë®‚Äçüíª –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –ó–ê–ü–†–ï–©–ê–ï–¢–°–Ø:\n\n1.' \
           ' –û—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ (–≤ —Ç–µ—á–µ–Ω–∏–∏ 7 ' \
           '–¥–Ω–µ–π) ‚ùó—à—Ç—Ä–∞—Ñ 7 —Ä—É–±–ª–µ–π –∑–∞ –æ—Ç–ø–∏—Å–∫—É —Å –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n\n2. –°–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ' \
           '–∑–∞–¥–∞–Ω–∏–π (* –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–æ—à–µ–ª—å–∫–∏ *) üò± –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –æ–±–Ω—É–ª—ë–Ω –ø—Ä–∏ ' \
           '–≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤\n\nüëî –ó–∞–∫–∞–∑—á–∏–∫–∞–º –ó–ê–ü–†–ï–©–ê–ï–¢–°–Ø:\n\n1. –†–∞–∑–º–µ—â–∞—Ç—å –∫–∞–Ω–∞–ª—ã, –≥—Ä—É–ø–ø—ã –∏ –ø–æ—Å—Ç—ã –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–æ–≥–æ, ' \
           '–ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ, —Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ, –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–æ–≥–æ, —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω–æ–≥–æ –∏–ª–∏ –¥–∏–ø—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è üò± –∑–∞–∫–∞–∑ ' \
           '–±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤\n\n2. –£–±–∏—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ —É –±–æ—Ç–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ üò± –∑–∞–∫–∞–∑ ' \
           '–±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤‚ùóÔ∏è ' \
           '*—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ —É–¥–∞–ª—è—Ç—å –±–æ—Ç–∞ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–∏ ' \
           '7 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –û–ö–û–ù–ß–ê–ù–ò–Ø –∑–∞–∫–∞–∑–∞, –∏–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –í–∞—à –∫–∞–Ω–∞–ª –±—É–¥–µ—Ç ' \
           '–Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞*\n\n‚ùï–¢–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫–∞:¬† @Evgenyadmin '
    bot.send_message(mes.from_user.id, text, parse_mode='Markdown')


@bot.message_handler(func=lambda mes: mes.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def stat(mes: types.Message):
    users = str(db_acces.get_users().count())
    channels = str(db_acces.get_channels().count())
    posts = str(db_acces.get_posts().count())
    new_users = config['stat']['new_users']
    end_channels = config['stat']['end_channels']
    end_posts = config['stat']['end_posts']
    got_money = config['stat']['got_money']
    gave_money = config['stat']['gave_money']

    text = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:*\n\n' \
           'üë•–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {u}\n' \
           'üë§–ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {nu}\n' \
           'üéØ–ö–∞–Ω–∞–ª–æ–≤ –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏: {c}\n' \
           'üé¨–ü–æ—Å—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏: {p}\n' \
           'üéØ–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {nc}\n' \
           'üé¨–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {np}\n' \
           'üíµ–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {gm}—Ä\n' \
           'üí≥–í—ã–ø–ª–∞—á–µ–Ω–æ –¥–µ–Ω–µ–≥: {gam}—Ä\n'.format(
               u=users,
               nu=new_users,
               c=channels,
               p=posts,
               nc=end_posts,
               np=end_posts,
               gm=got_money,
               gam=gave_money
           )
    bot.send_message(mes.from_user.id, text, parse_mode='Markdown')


@bot.message_handler(func=lambda mes: mes.text == 'üëÅ –°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç')
def watch_post(mes: types.Message):
    queue = db_acces.get_user_pos_post(mes.from_user.id)
    post = db_acces.get_post(queue)
    if post is not None:
        money = post.price_for_watch / 2
        username = post.from_chat_username
        bot.forward_message(mes.from_user.id, username, post.from_message_id)
        msg = bot.send_message(mes.from_user.id, '–°–º–æ—Ç—Ä–∏–º –Ω–∞ –ø–æ—Å—Ç 3 —Å–µ–∫—É–Ω–¥—ã. 3... 2... 1...')
        db_acces.decrement_watchs(queue)
        db_acces.increment_watched_posts(mes.from_user.id)
        db_acces.add_sum_to_balance(mes.from_user.id, money)
        db_acces.add_sum_to_earned(mes.from_user.id, money)
        db_acces.add_income_watched(mes.from_user.id, money)
        time.sleep(3)
        bot.edit_message_text('–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {m}—Ä.'.format(m=str(money)), mes.from_user.id, msg.message_id)
        db_acces.set_user_pos_post(mes.from_user.id, queue + 1)

        bot.send_message(mes.from_user.id, '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ', reply_markup=get_main_menu_markup())

        if db_acces.get_post_count_of_watch(queue) == 0:
            new_post = int(config['stat']['end_posts']) + 1
            config.set('stat', 'end_posts', str(new_post))
            save_data()
            db_acces.delete_channel(queue)

            db_acces.delete_post(queue)
            db_acces.decrement_user_pos_post(queue)
    else:
        bot.send_message(mes.from_user.id, '–ü–æ–∫–∞ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ—á–µ–≥–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ')


@bot.message_handler(func=lambda mes: mes.text == '‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª')
def subscribe_to_channel(mes: types.Message):
    queue = db_acces.get_user_pos_channel(mes.from_user.id)
    channel = db_acces.get_channel(queue)
    if channel is not None:
        money = channel.price_for_sub
        link = db_acces.get_channel_link(queue)
        keyboard = types.InlineKeyboardMarkup()
        button_sub = types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', url=link)
        button_check = types.InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª', callback_data=channel.username)
        keyboard.add(button_sub, button_check)
        bot.send_message(mes.from_user.id, '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏', reply_markup=keyboard)
    else:
        bot.send_message(mes.from_user.id, '–ü–æ–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ', reply_markup=get_main_menu_markup())


@bot.callback_query_handler(func=lambda call: True)
def check_subscription(call: types.CallbackQuery):
    # TODO: –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ —É –±–æ—Ç–∞
    username = call.data
    try:
        if bot.get_chat_member('@' + username, call.from_user.id) is not None:
            queue = db_acces.get_user_pos_channel(call.from_user.id)
            channel = db_acces.get_channel(queue)

            if channel is None:
                bot.delete_message(call.from_user.id, call.message.message_id)
                return

            money = channel.price_for_sub / 2

            db_acces.decrement_sub(queue)
            db_acces.increment_made_sub(call.from_user.id)
            db_acces.add_sum_to_balance(call.from_user.id, money)
            db_acces.add_sum_to_earned(call.from_user.id, money)
            db_acces.add_income_sub(call.from_user.id, money)

            bot.edit_message_text('–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {m}—Ä.'.format(m=str(money)), call.from_user.id, call.message.message_id,
                                  reply_markup=get_main_menu_markup())

            db_acces.set_user_pos_channel(call.from_user.id, queue + 1)
            if db_acces.get_channel_count_of_sub(queue) == 0:
                new_channel = int(config['stat']['end_channels']) + 1
                config.set('stat', 'end_channels', str(new_channel))
                save_data()
                db_acces.delete_channel(queue)
                db_acces.decrement_user_pos_channel(queue)
        else:
            bot.send_message(call.from_user.id, '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª')
    except apihelper.ApiException:
            queue = db_acces.get_user_pos_channel(call.from_user.id)
            channel = db_acces.get_channel(queue)

            if channel is None:
                bot.delete_message(call.from_user.id, call.message.message_id)
                return

            money = channel.price_for_sub / 2

            db_acces.decrement_sub(queue)
            db_acces.increment_made_sub(call.from_user.id)
            db_acces.add_sum_to_balance(call.from_user.id, money)
            db_acces.add_sum_to_earned(call.from_user.id, money)
            db_acces.add_income_sub(call.from_user.id, money)

            bot.edit_message_text('–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {m}—Ä.'.format(m=str(money)), call.from_user.id, call.message.message_id)
            bot.send_message(call.from_user.id, '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ', reply_markup=get_main_menu_markup())

            db_acces.set_user_pos_channel(call.from_user.id, queue + 1)
            if db_acces.get_channel_count_of_sub(queue) == 0:
                new_channel = int(config['stat']['end_channels']) + 1
                config.set('stat', 'end_channels', str(new_channel))
                save_data()
                db_acces.delete_channel(queue)
                db_acces.delete_channel(queue)
                db_acces.decrement_user_pos_channel(queue)


def get_admin_markup():
    markup = types.ReplyKeyboardMarkup()
    markup.row('–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
    markup.row('–°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
    markup.row('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–≤–µ–ª —Å—É–º–º—É')
    markup.row('‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.resize_keyboard = True
    return markup


@bot.message_handler(commands=['admin'], func=lambda mes: (mes.from_user.id == ADMIN_ID or mes.from_user.id == MY_ID) and
                     db_acces.get_user_state(mes.from_user.id) == states.CHOOSE_OPTION)
@bot.message_handler(func=lambda mes: (mes.from_user.id == ADMIN_ID or mes.from_user.id == MY_ID) and
                     db_acces.get_user_state(mes.from_user.id) == states.CHOOSE_OPTION and (mes.text == '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å üì≤'))
def admin_panel(mes: types.Message):
    text = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –∞–¥–º–∏–Ω, {u}!'.format(u=mes.from_user.first_name)
    bot.send_message(mes.from_user.id, text, reply_markup=get_admin_markup())


@bot.message_handler(func=lambda mes: mes.text == '–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é' and
                     (mes.from_user.id == ADMIN_ID or mes.from_user.id == MY_ID) and
                     db_acces.get_user_state(mes.from_user.id) == states.CHOOSE_OPTION)
def add_sum_to_balance_id(mes: types.Message):
    text = '–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å - –≤–≤–µ–¥–∏ <–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> - <—Å—É–º–º–∞ —á–∏—Å–ª–æ–º>\n\n' \
           '–ù–∞–ø—Ä–∏–º–µ—Ä: 446116692 - 30'
    markup = types.ReplyKeyboardMarkup()
    markup.row('–û—Ç–º–µ–Ω–∞')
    markup.resize_keyboard = True
    db_acces.set_user_state(mes.from_user.id, states.ADD_MONEY)
    bot.send_message(mes.from_user.id, text, reply_markup=markup)


@bot.message_handler(func=lambda mes: (mes.from_user.id == ADMIN_ID or mes.from_user.id == MY_ID) and
                     db_acces.get_user_state(mes.from_user.id) == states.ADD_MONEY)
def add_sum_to_balance(mes: types.Message):
    if mes.text == '–û—Ç–º–µ–Ω–∞':
        db_acces.set_user_state(mes.from_user.id, states.CHOOSE_OPTION)
        bot.send_message(mes.from_user.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=get_admin_markup())
        return
    try:
        user_id, money = map(int, str(mes.text).split(' - '))
    except ValueError:
        bot.send_message(mes.from_user.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
    else:
        result = db_acces.add_sum_to_balance(user_id, money)
        db_acces.set_user_state(mes.from_user.id, states.CHOOSE_OPTION)
        if result:
            got_money = int(config['stat']['got_money']) + money
            config.set('stat', 'got_money', str(got_money))
            save_data()
            bot.send_message(user_id, '–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {}—Ä.'.format(str(money)))
            bot.send_message(mes.from_user.id, '–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω', reply_markup=get_admin_markup())
        else:
            bot.send_message(mes.from_user.id, '–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!', reply_markup=get_admin_markup())


@bot.message_handler(func=lambda mes: mes.text == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–≤–µ–ª —Å—É–º–º—É' and
                     (mes.from_user.id == ADMIN_ID or mes.from_user.id == MY_ID) and
                     db_acces.get_user_state(mes.from_user.id) == states.CHOOSE_OPTION)
def remove_sum_from_balance_id(mes: types.Message):
    text = '–ß—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å –±–∞–ª–∞–Ω—Å - –≤–≤–µ–¥–∏ <–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> - <—Å—É–º–º–∞ —á–∏—Å–ª–æ–º>\n\n' \
           '–ù–∞–ø—Ä–∏–º–µ—Ä: 446116692 - 30'
    markup = types.ReplyKeyboardMarkup()
    markup.row('–û—Ç–º–µ–Ω–∞')
    markup.resize_keyboard = True
    db_acces.set_user_state(mes.from_user.id, states.REMOVE_MONEY)
    bot.send_message(mes.from_user.id, text, reply_markup=markup)


@bot.message_handler(func=lambda mes: (mes.from_user.id == ADMIN_ID or mes.from_user.id == MY_ID) and
                     db_acces.get_user_state(mes.from_user.id) == states.REMOVE_MONEY)
def remove_sum_from_balance(mes: types.Message):
    if mes.text == '–û—Ç–º–µ–Ω–∞':
        db_acces.set_user_state(mes.from_user.id, states.CHOOSE_OPTION)
        bot.send_message(mes.from_user.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=get_admin_markup())
        return
    try:
        user_id, money = map(int, str(mes.text).split(' - '))
    except ValueError:
        bot.send_message(mes.from_user.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
    else:
        balance = db_acces.get_user_balance(user_id)
        if balance is None:
            bot.send_message(mes.from_user.id, '–¢–∞–∫–æ–≥–æ —Å—á–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', reply_markup=get_admin_markup())
            db_acces.set_user_state(mes.from_user.id, states.CHOOSE_OPTION)
            return
        if (balance - money) <= 0:
            result = db_acces.set_user_balance(user_id, 0)
        else:
            result = db_acces.set_user_balance(user_id, balance - money)
        db_acces.set_user_state(mes.from_user.id, states.CHOOSE_OPTION)
        if result:
            gave_money = int(config['stat']['gave_money']) + money
            config.set('stat', 'gave_money', str(gave_money))
            save_data()
            bot.send_message(user_id, 'C –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–≤ —Å–Ω—è—Ç–æ {}—Ä.'.format(str(money)))
            bot.send_message(mes.from_user.id, '–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —É–º–µ–Ω—å—à–µ–Ω', reply_markup=get_admin_markup())
        else:
            bot.send_message(mes.from_user.id, '–û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!', reply_markup=get_admin_markup())


@bot.message_handler(func=lambda mes: mes.text == '–°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º' and
                     (mes.from_user.id == ADMIN_ID or mes.from_user.id == MY_ID) and
                     db_acces.get_user_state(mes.from_user.id) == states.CHOOSE_OPTION)
def insert_text(mes: types.Message):
    text = '–î–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑–º–µ—Ç–∫–µ Markdown \n\n' \
           '–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ç–∫–µ: \n\n' \
           '*–ñ–∏—Ä–Ω—ã–π*\n_–ö—É—Ä—Å–∏–≤_\n[–Ω–∞–∑–≤–∞–Ω–∏–µ URL](http://www.example.com/)\n`–∫–æ–¥ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏`\n\n' \
           '–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'
    db_acces.set_user_state(mes.from_user.id, states.SHARE_INFO)
    bot.send_message(mes.from_user.id, text, reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(func=lambda mes: (mes.from_user.id == ADMIN_ID or mes.from_user.id == MY_ID) and
                     db_acces.get_user_state(mes.from_user.id) == states.SHARE_INFO)
def share_info(mes: types.Message):
    text = mes.text
    users = db_acces.get_users()
    for u in users:
        try:
            bot.send_message(u.telegram_id, text, parse_mode='Markdown')
        except:
            pass
    db_acces.set_user_state(mes.from_user.id, states.CHOOSE_OPTION)
    bot.send_message(mes.from_user.id, '–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', reply_markup=get_admin_markup())


@bot.message_handler(content_types=['text'])
def other_message(mes: types.Message):
    bot.send_message(mes.from_user.id, '–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã',
                     reply_markup=types.ReplyKeyboardRemove())


# –µ—Å–ª–∏ –≤ –æ–∫—É—Ä–∂–µ–Ω–∏–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è HEROKU, –∑–Ω–∞—á–∏—Ç –ø–æ–¥–Ω–∏–º–∞–µ–º —Å–µ—Ä–≤–µ—Ä
# –∏–Ω–∞—á–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∫—É
if 'HEROKU' in list(os.environ.keys()):
    @server.route('/' + TOKEN, methods=['POST'])
    def get_message():
        bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
        return "!", 200

    @server.route('/')
    def webhook():
        bot.remove_webhook()
        bot.set_webhook(url='https://my-money-bot.herokuapp.com/' + TOKEN)
        return '!', 200
    if __name__ == '__main__':
        db_acces.init_db()
        server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
else:
    bot.remove_webhook()
    bot.polling(True)
